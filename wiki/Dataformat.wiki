#summary Beskrivelse af dataformatet til plotteren


= Advarsel =

Denne side er afhængig af [Systemstyring hvordan systemet styres]. Systemstyringen er endnu ikke vedtaget og låst, og derfor er denne side kun et udkast.


= Dataformat =

Datafilen indeholder kun *instruktioner på lavt niveau*. For instruktioner på højt niveau: se "Hvordan genereres instruktionsfilen?"

Vi har brug for en række instruktioner, som beskriver, hvad vi skal
gøre med vores hardware. Jeg (Kristian) ser, at vi mindst har brug for
følgende instruktioner:

  * Flyt x-akse-motor frem
  * Flyt x-akse-motor tilbage
  * Flyt y-akse-motor frem
  * Flyt y-akse-motor tilbage
  * Sænk skrivehovedet
  * Løft skrivehovedet

Derudover er det praktisk med følgende instruktioner:

  * Begynd tegning
  * Slut tegning
  * Nul-instruktion (tom instruktion)

Følgende instruktioner kan reducere instruktionsfilens størrelse:

  * Begynd løkke (efter fulgt af X antal bits, som indikerer det antal gange, løkken skal køres)
  * Afslut løkke
  * Gå til-instruktion, hvor stien hen til punktet ikke er vigtig.

Vi har altså 11 forskellige instruktioner, som der skal være plads til
i hver instruktionsenhed. Vi er altså nødt til at bruge 4 bits for at
have plads til alle instruktionerne i en instruktionsenhed. Med 4 bits
har vi plads til 16 (2^4^) instruktioner, og vi har derfor 5 pladser
til overs. Disse instruktioner kan evt. bruges til senere.

Vi kan måske anvende nogle standarder der i forvejen findes.
[http://en.wikipedia.org/wiki/G-code] - noget der bliver anvendt til CNC maskin instruktioner. Dog indeholder de flere instruktioner end vi får brug for på det lave instruktionsniveau.


== Højniveauinstruktioner ==

Hvis vi skal have højniveauinstruktioner, er det nok en god ide kun at have linier. Disse kunne så fortolkes af software på chippen til lavniveauinstruktioner.

Hvis vi også skal have højniveauinstruktioner, har vi brug for flerer bits pr. instruktion end de 4. Fx 8 (for så er en instruktion lig en byte).


= Hvordan genereres instruktionsfilen? =

Vi skal have et program, der kan generere vores instruktionsfil. Ellers skal vi hardcode en instruktionsfil, og det gider jeg (Kristian) ikke.

Det er her, jeg ser den største udfordring: Hvordan omsætter vi en linie, en cirkel, cirkelbue eller funktionsforskrift i et endeligt interval? Kurven skal omsættes matematisk til enten en lodret streg op, lodret streg ned, vandret streg til højre eller vandret streg til venstre.


= Dataoverførsel =

Vi har følgende muligheder for at få data på chippen: Dataene kan

  * hardcores ind i chippen
  * sendes via serielt kabel til chippen
  * lagres på hukommelseskort og læses fra chippen

*Hardcodede data* i chippen er en rigtig dårlig ide. Så skal vi manuelt lave instruktionerne (tegningen) og kompilere dataene ind i et program. Så kan maskinen kun tegne én tegning uden at blive programmeret igen.

*Serielt overførte data* kræver meget computerkommunikation. Måske fylder computerdelen for meget i denne proces. Maskinen er samtidig afhængig af, at computeren er sluttet til under hele tegningen.

*Data lagret på hukommelseskort* kræver hardware til hukommelseskort og software, der kan læse hukommelseskortet. Se [http://www.captain.at/electronic-atmega-sd-card.php hvordan man kan læse SD-kort med en atmega16-chip].